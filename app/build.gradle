apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply plugin: "com.tngtech.jgiven.gradle-plugin"

apply from: "$project.rootDir/tools/findbugs.gradle"
apply from: "$project.rootDir/tools/checkstyle.gradle"
apply from: "$project.rootDir/tools/pmd.gradle"

jacoco {
    toolVersion = "0.8.1"
}

jacocoAndroidUnitTestReport {
    excludes += ['**/AutoValue_*.*',
                 '**/*JavascriptBridge.class',
                 '**/*_Impl*',
                 '**/*_MembersInjector.class',
                 '**/Dagger*Component.class',
                 '**/Dagger*Component$Builder.class',
                 '**/*Module_*Factory.class',
                 '**/R.class',
                 '**/R$*.class',
                 '**/*$ViewInjector*.*',
                 '**/*$ViewBinder*.*',
                 '**/BuildConfig.*',
                 '**/Manifest*.*',
                 '**/*..PresentersBinder.class',
                 '**/*..ViewStateProvider.class',
                 '**/*..State.class']
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.a65apps.architecturecomponents.sample"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 14
        versionName "1.0.13"
        testInstrumentationRunner "com.a65apps.architecturecomponents.sample.SampleTestRunner"

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        buildConfigField "String", "GITHUB_TOKEN", '"9e923caede2fa69d3a84009ae79cabb28dcd4b53"'
    }

    signingConfigs {
        debug {
            storeFile file("$propStoreFile")
            storePassword "$propStorePassword"
            keyAlias "$propKeyAlias"
            keyPassword "$propKeyPassword"
        }
        release {
            storeFile file("$propStoreFileRelease")
            storePassword "$propStorePassword"
            keyAlias "$propKeyAliasRelease"
            keyPassword "$propKeyPassword"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            signingConfig signingConfigs.debug
            testCoverageEnabled true
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        warningsAsErrors true
    }

    testOptions {
        animationsDisabled = true

        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    sourceSets {
        androidTest {
            java.srcDirs += 'scenario/java'
            resources.srcDirs += 'scenario/resources'
        }

        test {
            java.srcDirs += 'scenario/java'
            resources.srcDirs += 'scenario/resources'
        }
    }
}

dependencies {
    def autoValueParcelVersion = '0.2.6'
    def autoValueGsonVersion = '0.8.0'
    def butterKnifeVersion = '8.8.1'
    def retrofitVersion = '2.4.0'
    def roomVersion = '1.1.0'
    def okhttpVersion = '3.8.1'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':architecturecomponents')
    implementation project(':ciceronev4architecturecomponents')
    implementation project(':moxyarchitecturecomponents')
    implementation project(':daggerarchitecturecomponents')
    implementation project(':moxydaggerarchitecturecomponents')
    compileOnly project(':compiler')
    annotationProcessor project(':compiler')

    // Support
    implementation "com.android.support:appcompat-v7:$project.ext.supportVersion"
    implementation "com.android.support:recyclerview-v7:$project.ext.supportVersion"
    implementation "com.android.support:design:$project.ext.supportVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$project.ext.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$project.ext.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$project.ext.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$project.ext.daggerVersion"

    // MVP dependencies
    implementation "com.arello-mobile:moxy:$project.ext.moxyVersion"
    implementation "com.arello-mobile:moxy-app-compat:$project.ext.moxyVersion"
    annotationProcessor "com.arello-mobile:moxy-compiler:$project.ext.moxyVersion"

    // AutoValue
    compileOnly ("com.ryanharter.auto.value:auto-value-gson:$autoValueGsonVersion") {
        exclude group: "com.google.guava"
    }
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:$autoValueParcelVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:$autoValueGsonVersion"

    // ButterKnife dependencies
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:$project.ext.rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$project.ext.rxAndroidVersion"

    // Javax.inject annotations
    implementation "javax.inject:javax.inject:$project.ext.injectVersion"

    // Cicerone
    implementation "ru.terrakok.cicerone:cicerone:$project.ext.ciceroneV4Version"

    // JCIP dependencies
    implementation "net.jcip:jcip-annotations:$project.ext.jcipVersion"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // DB
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$roomVersion"

    // test dependencies
    testImplementation "junit:junit:$project.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$project.ext.mockitoVersion"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$project.ext.daggerVersion"
    testAnnotationProcessor "com.google.dagger:dagger-android-processor:$project.ext.daggerVersion"
    testImplementation 'androidx.test.ext:junit:1.0.0'
    testImplementation 'androidx.test:rules:1.1.0'
    testImplementation 'androidx.test:runner:1.1.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    testImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'
    testImplementation 'androidx.test:core:1.0.0'
    testImplementation "org.robolectric:robolectric:4.0.2"
    testImplementation "com.tngtech.jgiven:jgiven-junit:0.17.0"
    testImplementation 'org.slf4j:slf4j-simple:1.7.25'
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testCompileOnly project(':compiler')
    testAnnotationProcessor project(':compiler')

    // android test dependencies
    androidTestImplementation "com.tngtech.jgiven:jgiven-junit:0.17.0", {
        exclude group: 'com.google.code.gson'
        exclude group: 'net.bytebuddy'
    }
    androidTestImplementation 'org.slf4j:slf4j-simple:1.7.25'
    androidTestImplementation "org.mockito:mockito-android:$project.ext.mockitoVersion"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$project.ext.daggerVersion"
    androidTestAnnotationProcessor "com.google.dagger:dagger-android-processor:$project.ext.daggerVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:core:1.0.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'
    androidTestImplementation 'com.android.support:multidex:1.0.2'
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    androidTestCompileOnly project(':compiler')
    androidTestAnnotationProcessor project(':compiler')
}

def targetDir = 'build/jgiven-results'
def adb = android.getAdbExe().toString()
def reportsDir = '/storage/emulated/0/Download/jgiven-results/testDebugUnitTest'

task cleanJGivenReports(type: Delete) {
    delete targetDir
}

import com.android.ddmlib.AndroidDebugBridge
import com.android.ddmlib.IDevice

static def executeForAllDevices(android, Closure<IDevice> closure) {
    AndroidDebugBridge.initIfNeeded(false)
    AndroidDebugBridge bridge = AndroidDebugBridge.createBridge(android.getAdbExe().absolutePath, false)

    long timeOut = 30000 // 30 sec
    int sleepTime = 1000
    while (!bridge.hasInitialDeviceList() && timeOut > 0) {
        sleep(sleepTime)
        timeOut -= sleepTime
    }
    if (timeOut <= 0 && !bridge.hasInitialDeviceList()) {
        throw new RuntimeException("Timeout getting device list.", null)
    }
    IDevice[] devices = bridge.devices
    for (IDevice device : devices) {
        closure(device)
    }
}

afterEvaluate {
    task pullJGivenReports(type: Exec, dependsOn: cleanJGivenReports) {
        doFirst {
            if (!file(targetDir).mkdirs()) {
                println("Cannot create dir "+targetDir)
            }
        }

        executeForAllDevices(android) {
            commandLine adb, '-s', it.serialNumber, 'pull', reportsDir, targetDir
        }

        doLast {
            println("Pulled " + reportsDir + " to " + targetDir)
        }
    }

    task cleanJGivenReportsFromDevice(type: Exec) {
        executeForAllDevices(android) {
            commandLine adb, '-s', it.serialNumber, 'shell', 'rm -rf', reportsDir
        }

        doLast {
            println("Deleted "+reportsDir)
        }
    }

    connectedDebugAndroidTest {
        finalizedBy pullJGivenReports
    }

    pullJGivenReports {
        finalizedBy jgivenTestDebugUnitTestReport, cleanJGivenReportsFromDevice
    }

    project.getTasks().withType(Test.class) {
        finalizedBy project.getTasks().getByName("jgiven" + it.name.capitalize() + "Report")
    }
}
